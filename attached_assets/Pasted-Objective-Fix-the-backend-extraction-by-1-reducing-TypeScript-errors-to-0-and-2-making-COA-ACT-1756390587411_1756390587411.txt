Objective: Fix the backend extraction by (1) reducing TypeScript errors to 0, and (2) making COA_ACTUAL == COA_EXPECTED (87). Re-run the parity audit. Only create a new tarball if all checks pass.
0) Context
Project: peergos-backend-prod
Current blockers: TYPECHECK_ERRORS=49, COA_EXPECTED=87, COA_ACTUAL=10.
1) Fix TypeScript errors to zero
Run npm run typecheck and capture the full error list.
Systematically fix errors:
Resolve path alias issues: either replace with relative imports or add "baseUrl": "src" and needed "paths" in tsconfig.json; update imports accordingly.
Remove any frontend types or modules lingering in backend files (React/Vite types, shadcn, Tailwind config, etc.).
Install missing type packages (@types/express, @types/cookie, @types/jsonwebtoken, etc.) where referenced.
Standardize module system: keep "type": "commonjs", module: "CommonJS", and esModuleInterop: true. If any module forces ESM, refactor import/exports to CommonJS style or isolate in a wrapper.
Ensure only server code is included by tsconfig "include": ["src","scripts"] and no UI directories are included.
Re-run npm run typecheck until it prints 0 errors.
At the end, print: TYPECHECK_ERRORS=<number>.
2) Fix UAE Chart of Accounts (COA) seeding to exact 87 rows
Open the COA seeder (scripts/seed-coa.ts or equivalent). Ensure it loads REFERENCE_COA.json (full canonical list) or an equivalent in-repo dataset that contains exactly 87 accounts.
Make the seeder idempotent:
Upsert by a stable key (e.g., account_code), not blind inserts.
Wrap in a transaction; log the final count after seeding.
Re-run DB setup:
npm run db:push || npm run db:migrate
npm run build
node dist/scripts/seed-coa.js
Query the DB and print:
COA_EXPECTED=87
COA_ACTUAL=<n>
COA_MISSING_IDS=[...] (first 10 if any)
COA_EXTRA_IDS=[...] (first 10 if any)
Also print 5 sample rows: account_code + name (first 5 by code).
Success criterion: COA_ACTUAL must equal 87. If not, fix data mapping or filters (e.g., ensure no category filter is excluding accounts; ensure locale/i18n doesnâ€™t mask names) and repeat.
3) Re-run health & parity audit (must pass)
# Health
node dist/server.js & echo $! > /tmp/api.pid
sleep 2
curl -s -o /dev/null -w "HEALTH_HTTP=%{http_code}\n" http://localhost:8080/health
curl -s http://localhost:8080/admin/coa/count | sed -e 's/.*/COA_COUNT_JSON=&/'
kill $(cat /tmp/api.pid) || true

# Full parity suite
node dist/scripts/generate-openapi.js
node dist/scripts/verify-env.js
node dist/scripts/verify-routes.js
node dist/scripts/verify-schemas.js
node dist/scripts/verify-seeds.js
node dist/scripts/verify-auth.js
node dist/scripts/verify-jobs.js
node dist/scripts/verify-config.js
node dist/scripts/verify-all.js
At the end, print exactly:
TYPECHECK_ERRORS=<n>
HEALTH_HTTP=<code>
COA_EXPECTED=87
COA_ACTUAL=<n>
PARITY_FINAL=<PASS|FAIL>
4) Package only if all conditions are met
Conditions to package:
TYPECHECK_ERRORS=0
HEALTH_HTTP=200
COA_ACTUAL=87
PARITY_FINAL=PASS
If met, build and package:
TS=$(date +%Y%m%d-%H%M)
tar -czf "peergos-backend-$TS-fixed.tar.gz" \
  --exclude="node_modules" --exclude=".git" --exclude="*.map" --exclude="*.log" \
  dist package.json package-lock.json tsconfig.json .env.example \
  MANIFEST.json PARITY_REPORT.md README.md
ls -lh "peergos-backend-$TS-fixed.tar.gz"
tar -tzf "peergos-backend-$TS-fixed.tar.gz" | wc -l | xargs echo "PACKAGE_FILECOUNT"
echo "PACKAGE_PATH=$(pwd)/peergos-backend-$TS-fixed.tar.gz"
If any condition fails: do not package. Print failing sections and keep the server code open for immediate fixes.