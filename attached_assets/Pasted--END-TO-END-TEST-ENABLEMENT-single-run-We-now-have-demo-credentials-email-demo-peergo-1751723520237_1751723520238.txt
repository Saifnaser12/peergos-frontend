🧪  END-TO-END TEST ENABLEMENT  (single run)

We now have demo credentials:

• email:    demo@peergos.test
• password: Demo1234!
• company:  Demo Trading LLC  (TRN 100000000001)

TASKS
1️⃣  Make /api/public/demo return the full JSON health object (not the plain “OK”).
2️⃣  Seed the demo SME + user exactly as above (idempotent).
3️⃣  Add a Playwright smoke-suite that logs in with the demo user and runs:
     ▸ Dashboard KPI check
     ▸ Add revenue → verify in Income Statement
     ▸ Generate invoice → download XML
4️⃣  Build the suite in CI and expose the HTML report at  /playwright-report/
5️⃣  Update Deploy settings:
     • Build cmd :  pnpm run build && pnpm run test:e2e
     • Run  cmd :  node server.js          (port 5000)

────────── IMPLEMENTATION DETAILS ──────────
server.js  (root — keep existing code, just replace relevant route)

```js
/* PUBLIC HEALTH ENDPOINT */
app.get('/api/public/demo', (_req, res) => {
  res.json({
    ok: true,
    name: 'Peergos Tax Compliance Hub',
    version: '1.0.0',
    vatRate: 0.05,
    citSmallBusinessReliefAED: 375000,
    timestamp: new Date().toISOString()
  });
});

/* ONE-OFF DEMO SEED (safe to call repeatedly) */
let seeded = false;
app.post('/api/public/seedDemo', async (_req, res) => {
  if (seeded) return res.status(200).json({already:true});
  const pwd = 'Demo1234!';
  const company = await db.company.upsert({
    where:{trn:'100000000001'},
    update:{},
    create:{name:'Demo Trading LLC',trn:'100000000001'}
  });
  await db.user.upsert({
    where:{email:'demo@peergos.test'},
    update:{},
    create:{email:'demo@peergos.test',password:await hash(pwd),role:'ACCOUNTANT',companyId:company.id}
  });
  seeded = true;
  res.status(201).json({ok:true,email:'demo@peergos.test',password:pwd});
});
Playwright config & test (tests/e2e/peergos.spec.ts)

import { test, expect } from '@playwright/test';
const BASE = process.env.BASE ?? 'https://tax-compliance-hub-saifnalhawamdeh.replit.app';

test.beforeAll(async ({ request }) => {
  await request.post(`${BASE}/api/public/seedDemo`);
});

async function login(page) {
  await page.goto(`${BASE}/login`);
  await page.fill('input[type=email]', 'demo@peergos.test');
  await page.fill('input[type=password]', 'Demo1234!');
  await page.click('button[type=submit]');
  await page.waitForURL('**/dashboard');
}

test('Dashboard KPIs appear', async ({ page }) => {
  await login(page);
  await expect(page.getByText(/VAT payable/i)).toBeVisible();
});

test('Add revenue updates FS', async ({ page }) => {
  await login(page);
  await page.goto(`${BASE}/accounting`);
  await page.click('text=Add Revenue');
  await page.fill('input[name=amount]', '10000');
  await page.click('button:text("Save")');
  await page.goto(`${BASE}/financials`);
  await expect(page.getByText('10,000')).toBeVisible();
});

test('Invoice generation → XML', async ({ page }) => {
  await login(page);
  await page.goto(`${BASE}/invoice`);
  await page.fill('input[name=customer]', 'Acme LLC');
  await page.fill('input[name=total]', '5000');
  await page.click('button:text("Create Invoice")');
  const [dl] = await Promise.all([
    page.waitForEvent('download'),
    page.click('button:text("Download XML")')
  ]);
  expect(dl.suggestedFilename()).toMatch(/\.xml$/);
});
package.json additions

"devDependencies": { "@playwright/test": "^1.53.2" },
"scripts": {
  "build": "vite build",
  "preview": "vite preview --port 5000 --host 0.0.0.0",
  "test:e2e": "playwright install chromium && playwright test --reporter=list,html"
}
Deploy settings (Web Server):
• Build command pnpm run build && pnpm run test:e2e
• Run command node server.js
• Port 5000

────────── DONE CRITERIA ──────────
✅ /api/public/demo returns JSON (not “OK”)
✅ POST /api/public/seedDemo gives 201 & creds (idempotent)
✅ /playwright-report/ shows green tests
(If any step fails paste full deploy log.)

